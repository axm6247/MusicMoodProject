{"version":3,"sources":["context/Provider.js","components/YoutubePlayer.js","components/PlaylistCard.js","components/HomePage.js","api/youtube.js","components/Login.js","components/Searchbar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/YoutubeSearch.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","Provider","children","useState","controlsToggle","setControlsToggle","value","useContext","controls","url","Container","Accordion","defaultActiveKey","Card","bg","border","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","height","width","PlaylistCard","axios","create","baseURL","params","part","maxResults","key","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","type","to","pathname","Searchbar","state","term","handleChange","event","setState","target","handleSubmit","preventDefault","props","handleFormSubmit","onSubmit","this","htmlFor","onChange","name","React","Component","VideoItem","video","handleVideoSelect","console","log","id","videoId","onClick","src","snippet","thumbnails","medium","alt","description","title","VideoList","videos","renderedVideos","map","VideoDetail","videoSrc","YoutubeSearch","selectedVideo","termFromSearchBar","a","youtube","get","q","response","data","items","style","marginTop","App","videosMetaInfo","selectedVideoId","Navbar","fixed","expand","text-align","Brand","href","class","aria-controls","exact","path","HomePage","YoutubePlayer","Login","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be780b1a.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react'\n\nconst Context= createContext({})\n\nconst Provider = ({ children }) => {\n    const [controlsToggle, setControlsToggle] = useState(false);\n\n    return (\n        <Context.Provider value={[controlsToggle, setControlsToggle]}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport { Provider, Context }\n","import React, { Component, useContext } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPlayer from \"react-player\";\nimport { Context } from '../context/Provider'\n\n\n\nexport default function () {\n  // Prevent page reload, clear input, set URL and push history on submit\n\n  const [controlsToggle, setControlsToggle] = useContext(Context);\n  // setControlsToggle(\"false\")\n  \n\n  return (\n\n    <ReactPlayer\n      controls={controlsToggle}\n      url=\"https://www.youtube.com/watch?v=xpVfcZ0ZcFM\"\n    />\n\n\n\n  );\n}\n\n\n\n","\nimport React, { Component, useContext } from \"react\";\nimport { HashRouter, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPlayer from \"react-player\";\nimport { Context } from '../context/Provider'\n\n\n\n\nexport default function () {\n  // Prevent page reload, clear input, set URL and push history on submit\n  const [controlsToggle, setControlsToggle] = useContext(Context);\n\n  return (\n\n\n    <Container>\n      <Accordion defaultActiveKey=\"0\">\n        <Card bg = \"light\" border = \"dark\">\n          <Card.Header>\n            <Accordion.Toggle as={Button } variant=\"danger\" eventKey=\"0\">\n              Music Video Playlist\n      </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body>\n    <ReactPlayer\n      height={240}\n      width = {426}\n      controls={true}\n      url=\"https://www.youtube.com/watch?v=xpVfcZ0ZcFM\"\n    />\n    <br></br>\n    <ReactPlayer\n      height={240}\n      width = {426}\n      controls={true}\n      url=\"https://www.youtube.com/watch?v=m7Bc3pLyij0\"\n    />\n    </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n        <Card bg = \"light\" border = \"dark\">\n          <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"1\">\n              Sports Playlist\n      </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"1\">\n            <Card.Body>Hello! I'm another body</Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    </Container>\n\n\n  );\n\n}\n","\nimport React, { Component, useContext } from \"react\";\nimport { HashRouter, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPlayer from \"react-player\";\nimport { Context } from '../context/Provider'\nimport PlaylistCard from './PlaylistCard'\n\n\n\n\nexport default function () {\n  // Prevent page reload, clear input, set URL and push history on submit\n  const [controlsToggle, setControlsToggle] = useContext(Context);\n\n  return (\n\n\n    <Container>\n    <b><i><u>My Playlists:</u></i></b>\n    <br/>\n    <br/>\n      <PlaylistCard/>\n    </Container>\n\n\n  );\n\n}","import axios from 'axios';\nconst KEY = 'AIzaSyApGtA1xk7mrU6rPqerFvfe6_rIGgj6Fs8';\n\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3/',\n    params: {\n        part: 'snippet',\n        maxResults: 15,\n        key: KEY\n    }\n})","import React, { Component, useContext } from \"react\";\nimport { HashRouter, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPlayer from \"react-player\";\nimport { Context } from '../context/Provider'\nimport youtube from '../api/youtube'\n// import YoutubeMusicApi from \"youtube-music-api\";\n// import '../css/style.css';\n// import gapi from \"../api/api\";\n\n// import useScript from 'hooks/useScript';\n\n\n\n\n// gapi.load(\"client:auth2\", function() {\n//   gapi.auth2.init({client_id: \"YOUR_CLIENT_ID\"});\n// });\n\n\n// const MyComponent = props => {\n//   // useScript('https://apis.google.com/js/api.js');\n//   // gapi.client.setApiKey(\"AIzaSyApGtA1xk7mrU6rPqerFvfe6_rIGgj6Fs8\");\n//   // gapi.client.load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\")\n//   //     .then(function() { console.log(\"GAPI client loaded for API\"); },\n//   //           function(err) { console.error(\"Error loading GAPI client for API\", err); });\n\n//   // gapi.client.youtube.channels.list({\n//   //               \"part\": [\n//   //                 \"snippet,contentDetails,statistics\"\n//   //               ],\n//   //               \"forUsername\": \"nigahiga\"\n//   //             })\n//   //                 .then(function(response) {\n//   //                         // Handle the results here (response.result has the parsed body).\n//   //                         console.log(\"Response\", response);\n//   //                       },\n//   //                       function(err) { console.error(\"Execute error\", err); });\n          \n\n\n\n\n\n//   // rest of your component\n// }\n\n\n\nexport default function () {\n  // Prevent page reload, clear input, set URL and push history on submit\n\n  const [controlsToggle, setControlsToggle] = useContext(Context);\n\n  // const onSearch = async keyword => {\n  //   const response = await youtube.get(\"/search\", {\n  //     params: {\n  //       q: keyword\n  //     }\n  //   });\n  //   this.setState({\n  //     videosMetaInfo: response.data.items,\n  //     selectedVideoId: response.data.items[0].id.videoId\n  //   });\n  //   console.log(this.state);\n  // };\n\n  // onSearch(\"Banking With Life\")\n  \n\n  // setControlsToggle(\"false\")\n  // loadClient();\n  // execute();\n  return(  \n     <InputGroup>\n    <InputGroup className=\"mb-3\">\n      <FormControl\n        placeholder=\"username\"\n        aria-label=\"username\"\n        aria-describedby=\"basic-addon2\"\n      />\n      <br />\n  \n      {/* <InputGroup.Append>\n      <InputGroup.Text id=\"basic-addon2\">@example.com</InputGroup.Text>\n    </InputGroup.Append> */}\n    </InputGroup>\n    <InputGroup>\n      <FormControl\n        placeholder=\"password\"\n        aria-label=\"password\"\n        type=\"password\"\n        aria-describedby=\"basic-addon2\"\n      /></InputGroup>\n      <br />\n      <br />\n      <Link to={{pathname : \"/\"}} variant=\"danger\" type=\"submit\">\n      <Button variant=\"danger\">Login</Button>\n      </Link>\n  </InputGroup>\n\n  );\n\n}\n\n\n\n","import React from 'react';\n\nclass Searchbar extends React.Component {\n    state = {\n        term: 'Default text'\n    };\n    handleChange = (event) => {\n        this.setState({\n            term: event.target.value\n        });\n    };\n    handleSubmit = event => {\n        event.preventDefault();\n        this.props.handleFormSubmit(this.state.term);\n    }\n\n    render() {\n        return (\n            <div className='search-bar ui segment'>\n                <form onSubmit={this.handleSubmit} className='ui form'>\n                    <div className='field'>\n                        <label htmlFor=\"video-search\">Video Search</label>\n                        <input onChange={this.handleChange} name='video-search' type=\"text\" value={this.state.term}/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\nexport default Searchbar;","import React from 'react';\nimport '../style/video.css';\n\nconst VideoItem = ({video , handleVideoSelect}) => {\n    console.log(video.id.videoId)\n    return (\n        <div>\n        <div onClick={ () => handleVideoSelect(video)} className=' video-item item'>\n            <img className='ui image' src={video.snippet.thumbnails.medium.url} alt={video.snippet.description}/>\n            \n            <div className='content'>\n                <div className='header '>{video.snippet.title}</div>\n            </div>\n        </div>\n        <br/>\n        </div>\n    )\n};\nexport default VideoItem;","import React from 'react';\nimport VideoItem from './VideoItem';\n\nconst VideoList = ({ videos, handleVideoSelect }) => {\n    const renderedVideos = videos.map((video) => {\n        return <VideoItem key={video.id.videoId} video={video} handleVideoSelect={handleVideoSelect} />\n        // console.log(video.id);\n    });\n\n    return (\n        <div className='ui relaxed divided list'>{renderedVideos} </div>\n    );\n};\nexport default VideoList;","import React from 'react';\nimport ReactPlayer from \"react-player\";\n\nconst VideoDetail = ({ video }) => {\n    if (!video) {\n        return <div>Loading ...<br/></div>;\n    }\n\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n    // console.log(typeof(video));\n    return (\n        <div>\n            <div className='ui embed'>\n                <ReactPlayer\n                    controls={\"true\"}\n                    url={videoSrc}\n                />\n\n            </div>\n            <div className='ui segment'>\n                <h4 className='ui header'>{video.snippet.title}</h4>\n                <p>{video.snippet.description}</p>\n            </div>\n        </div>\n\n    )\n}\n\nexport default VideoDetail;","import React from 'react';\nimport SearchBar from './Searchbar';\nimport youtube from '../api/youtube';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\nclass YoutubeSearch extends React.Component {\n    state = {\n        videos: [],\n        selectedVideo: null\n    }\n    handleSubmit = async (termFromSearchBar) => {\n        const response = await youtube.get('/search', {\n            params: {\n                q: termFromSearchBar\n            }\n        })\n        this.setState({\n            videos: response.data.items\n        })\n    };\n    handleVideoSelect = (video) => {\n        this.setState({selectedVideo: video})\n    }\n\n    render() {\n        return (\n            <div className='ui container' style={{marginTop: '1em'}}>\n                <SearchBar handleFormSubmit={this.handleSubmit}/>\n                <div className='ui grid'>\n                    <div className=\"ui row\">\n                        <div className=\"twelve wide column\">\n                            <VideoDetail video={this.state.selectedVideo}/>\n                        </div>\n                        <div className=\"eight wide column\">\n                            <VideoList handleVideoSelect={this.handleVideoSelect} videos={this.state.videos}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default YoutubeSearch;","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPlayer from \"react-player\";\nimport YoutubePlayer from './components/YoutubePlayer'\nimport MoodSelection from './components/MoodSelection'\nimport HomePage from './components/HomePage'\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Provider } from './context/Provider'\nimport Login from \"./components/Login\";\nimport YoutubeSearch from './components/YoutubeSearch';\n// import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n\nclass App extends Component {\n\n  // Prevent page reload, clear input, set URL and push history on submit\n\n  state = {\n    videosMetaInfo: [],\n    selectedVideoId: null\n  };\n  render() {\n  return (\n    <Provider>\n      <BrowserRouter>\n        <Navbar fixed=\"top\" bg=\"danger\" expand=\"lg\" variant=\"dark\" text-align=\"center\">\n          <Navbar.Brand href=\"/login\"><p class=\"p1\"><i><b>YourPlayer</b></i></p></Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n          </Navbar.Collapse>\n        </Navbar>\n        <Container>\n          <Switch>\n            <Route exact path=\"/\"><HomePage /></Route>\n            <Route exact path=\"/youtubeplayer\"><YoutubePlayer /></Route>\n            <Route exact path=\"/login\"><Login/></Route>\n            <Route exact path = \"/search\"><YoutubeSearch/></Route>\n          </Switch>\n        </Container>\n      </BrowserRouter>\n    </Provider>\n  );\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\n\n\n// ReactDOM.render(\n// <Navbar fixed = \"top\" bg=\"danger\" expand=\"lg\" variant=\"dark\" text-align=\"center\">\n//   <Navbar.Brand href=\"#home\" text-align=\"center\">Music Mood</Navbar.Brand>\n//   <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n//   <Navbar.Collapse id=\"basic-navbar-nav\">\n//   </Navbar.Collapse>\n// </Navbar>, document.getElementById('navbar'))\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}